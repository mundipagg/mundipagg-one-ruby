# mundi_api
#
# This file was automatically generated by APIMATIC v2.0 (
# https://apimatic.io ).

module MundiApi
  # CreateCardPaymentContactlessPOIRequest Model.
  class CreateCardPaymentContactlessPOIRequest < BaseModel
    # system name
    # @return [String]
    attr_accessor :system_name

    # model
    # @return [String]
    attr_accessor :model

    # provider
    # @return [String]
    attr_accessor :provider

    # serial number
    # @return [String]
    attr_accessor :serial_number

    # version number
    # @return [String]
    attr_accessor :version_number

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['system_name'] = 'system_name'
      @_hash['model'] = 'model'
      @_hash['provider'] = 'provider'
      @_hash['serial_number'] = 'serial_number'
      @_hash['version_number'] = 'version_number'
      @_hash
    end

    def initialize(system_name = nil,
                   model = nil,
                   provider = nil,
                   serial_number = nil,
                   version_number = nil)
      @system_name = system_name
      @model = model
      @provider = provider
      @serial_number = serial_number
      @version_number = version_number
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      system_name = hash['system_name']
      model = hash['model']
      provider = hash['provider']
      serial_number = hash['serial_number']
      version_number = hash['version_number']

      # Create object from extracted values.
      CreateCardPaymentContactlessPOIRequest.new(system_name,
                                                 model,
                                                 provider,
                                                 serial_number,
                                                 version_number)
    end
  end
end
